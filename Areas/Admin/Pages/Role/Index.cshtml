@page
@using RAZOR_EF.Helpers
@using RAZOR_EF.Models
@using Microsoft.AspNetCore.Identity;
@model RAZOR_EF.Areas.Admin.Role.IndexModel
@inject RoleManager<AppRole> roleManager
@{
    ViewData["Title"] = "Role";
}
@{
    // xây dựng Func phát sinh Url từ page ./Index
    var pagingModel = new PagingModel(){
        currentPage = @Model.currentPage,    // trang hiện tại
        countPages  = @Model.countPages,     // tổng  số trang 
        generateUrl = (int? pageNumber) => @Url.Page("/Role/Index", new {Search = @Model.Search, p = pageNumber})
    };
}
<h3>@ViewData["Title"]</h3>
<div style="display: flex; align-items: center; margin: 20px 0px;">
    <a class="btn btn-primary" asp-page="Create"><strong>+ New role</strong></a>
    <form method="get" asp-page="./Index" style="margin-left: auto; display: flex; align-items: center;">
        <input asp-for="@Model.Search" placeholder="Keyword of role name"/>
        <button class="btn btn-primary" type="submit" style="margin-left: 5px; padding: 2px 8px">Search</button>
    </form>
</div>
@if(@Model.Roles.Count == 0)
{
    if(!string.IsNullOrWhiteSpace(@Model.Search)) // Search but no result
    { 
        <p class="alert alert-danger">No results for this keyword.</p>
    }
    else //No search and no result
    {
        <p class="alert alert-danger">No roles have been created yet.</p>
    }
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Roles[0].Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Roles[0].Description)
                </th>
                <th>
                    Claims
                </th>
                <th class="px-3">
                    Action
                </th>
            </tr>
        </thead>
        <tbody>
    @foreach (var item in Model.Roles) {
            <tr>
                <td>
                    @if (!string.IsNullOrWhiteSpace(@Model.Search))
                        {
                            var markSearch = $@"<span style=""background-color: #ff8800;"">{@Model.Search}</span>";
                            item.Name = item.Name.Replace(@Model.Search, markSearch, StringComparison.OrdinalIgnoreCase);
                            @* item.Title = @Html.Raw(item.Title).ToString(); *@
                    }
                    @Html.Raw(item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @{
                        var listClaims = await roleManager.GetClaimsAsync(item);
                        var listClaimsName = listClaims.Select(c => $"{c.Type}: {c.Value}").ToList();
                        if (listClaimsName == null || listClaimsName.Count() == 0)
                        {
                            <p class="text-danger">No claim</p>
                        }
                        else
                        {
                            <p>@string.Join(", ", listClaimsName)</p>
                        }
                    }
                </td>
                <td>
                    <a class="btn btn-outline-info px-2 mx-1" asp-page="./Edit" asp-route-id="@item.Id">Edit</a>
                    <a class="btn btn-outline-danger px-2 mx-1" asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
    }
        </tbody>
    </table>
    <div>
        <p><strong>Total: @Model.TotalRole</strong></p>
    </div>
    <div style="display: flex; justify-content: center; margin-top: 20px;">
        <partial name="_Paging" model="@pagingModel"/>
    </div>
}
@if (!string.IsNullOrWhiteSpace(@Model.Search))
{
    <a class="btn btn-outline-secondary" asp-page="./Index">@("< View all roles")</a>
}
